<h3 id=a>Goals</h3>
<p>Table 1 attempts to capture some simple goals. If something was known from the crosswire site, that was just copied.</p>

<table border=1>
	<caption>Table a1 - Tentative goals</caption>
	<tr>
		<th>No</th>
		<th>Name</th>
		<th>Priority</th>
		<th>Comment(s)</th>
	</tr>
	<tr>
		<td>1</td>
		<td>Christian service</td>
		<td></td>
		<td>collaborate on free, open-source projects aimed at serving the Christian organizations (churches) including those that can't afford or are otherwise not equipped with bible resources.</td>
	</tr>
	<!-
	While secular markets are capable of printing bibles, making apps, and sometimes selling them, many bible books were written to churches and/or Israel to give them more of a charge in this activity than the market systems.
	-->
	<tr>
		<td>2</td>
		<td>distribute scripture to as many people within a domain as possible.</td>
		<td></td>
		<td>Users and operators should be able to study the bible without making compromises. That includes not having to compromise by using a platform other than their favorite. Furthermore, consider being ready to produce the paper format since some people prefer to avoid electronic devices or don't have an electronic device. Also, consider service to those with disabilities.
		</td>
		<!-- details ...
			Disabilities include eyesight, hearing, etc. 

		security: It was reported that some locations around the world do not want anyone to have any bibles. Can the operator be notified at installation time about known risks? A new reader might not have learned this yet, so does the install warning help them know the current spiritual status at their location?
		-->
	</tr>

	<tr>
		<td>3</td>
		<td>Modules</td>
		<td></td>
		<td>In addition to existing categories (bible texts, commentaries, lexicons/dictionaries, Glossaries, Daily devotionals, and generic books), consider use by special groups/topics: Preserving original scriptures, local church libraries, children, youth, men, women, seniors, worship (music), evangelism (outreach), missions, etc.
		<br> 
		Allow SWORD modules to be copied by project Gutenberg if they chose. This could avoid duplicate effort to maintain a similar scripture set for what really is similar.
		<br>
		Minimize the complexity of procedures to develop a module or convert it to other file formats. 
		</td>
	<!-- details ... 
		The missions special group can include a lot of subjects - health, buildings, transportation, etc.

		evangelism: Should the technology domain be involved in evangelism, such as optimizing the presentation / marketing of bible apps? Do the Android and Apple stores have the ability to reach those using other human languages? Are the Android/Apple stores unable to reach any locations?
		
	-->
	</tr>
	<tr>
		<td>4</td>
		<td>Module testing</td>
		<td></td>
		<td>Support review of modules. The label of cult / unorthodox / questionable material is one example where this occurred. But more assessments are possible and mentioned in some bible studies. Consider a feedback mechanism.</td>
	<!-- details ...
	Module testing isn't software testing. It is to defend doctrine. Learning from history, 1 Tim 1:1-3 records how someone was able to introduce "strange doctrine", which Timothy needed to defend against. Likewise, Galatians 1:6-7 records how that church started to desert Christ.
	-->
	</tr>


	<tr>
		<td>5</td>
		<td>Scripture and software maintenance</td>
		<td></td>
		<td>The bible mentions scripture previously was on stone tablets (Ex 24:12, etc) and scrolls (Jer 36:2, etc). In the modern day, digital data and software programs are more common. Therefore, maintain the modern data and software to at least support the previous roles of tablets / scrolls. 
		<br>Maintenance and simplification of software can help minimize the number of divided [software] kingdoms (Matthew 12:25). If there is no simplification, the complexity can become too much for some, leading to frustration and a split to start-up another project.

		</td>
		<!-- details ...

		Consider human factors - is it easy to use buttons, menus, help, etc.

		Can common folks understand the most basic activities of maintenance without a lot of software training? 
		Is there a single process to handle enhancement/trouble reports or is this complicated by being split among different software sub-projects?

	Software size control was a goal copied from Caesar. Prevent uncontrolled growth in the amount of software that must be developed.

		-->
	</tr>

	<tr>
		<td>6</td>
		<td>Limitations</td>
		<td></td>
		<td>Be aware if there is a limitation that some places or countries can't be reached by Google play, Apple store, and other internet bibles (<a href="https://www.persecution.com/">link</a>). Where there are limitations, recognize other methods will have priority if those places are to be reached.</td>
		<!-- details ...
		-->
	</tr>

</table>
